ImproveMethod=55
GreedyMeasure=1
LocalSearch=0
MaxIter=10
MaxIterWithoutImprove=3000
GLS_alpha_fixedcost=0.8
GLS_alpha_transpcost=0.0
SA_beta=0.95
min_acc_rate = 0.001
ini_acc_rate = 0.3
SA_sample_growth = 0.02
Runs=100
Restart=1
Output= 1
Intermediate_Output=0
lambda=100
mu=100
RTR_procent=0.1
RTR_ILS_REP=50
CPXTIME=200
CPXNODELIM=20000
CALLBCK=15

# --------------------------------------------------------------------------------------
# This file determines the following parameters. The order in which the above parameters
# are listed does not matter. It also does not matter if before or after the "=" sign
# there is a space or not.
# --------------------------------------------------------------------------------------

#-------------------------
# Parameter: ImproveMethod
# ------------------------
# Specifies the improvment method that will be applied for finding improved solution.
# Possible values are:
# 
#   0 : not any improvement method is applied
#   1 : a simple local search method following either a first or best accept strategy is applied
#   2 : iterated local search is applied
#   3 : applies a multi-start local search
#   4 : applies simulated annealing
#   5 : applies simulated annealing in a way Osman suggested it for the generalized assignment problem
#   6 : guided local search is used
#   7 : variable neighbourhood search 
#   8 : record-to-record travel similar to the one in Li, Golden, Wasil (2005) is applied
#   9 : record-to-record travel as suggested by Jeanne Aslak Andersen (2010) (i.e. the random move
#       applied is to make the same solution perturbation followed by local search as in ILS)
#  10 : a GRASP is applied
#  11 : ant colony procedure
#  12 : evolutionary algorithm
#  13 : tabu search
#  14 : RTR-ILS, a hybrid record to record travel that uses ILS as the local search
#  15 : ILS-RTR, an iterated local search that uses an RTR as underlying improvement method
#  16 : RTR-VNS, a hybrid RTR that uses VNS as the local search
#  17 : VNS-RTR, a hybrid VNS that uses RTR as the local search
#  18 : An "extended" scatter search as proposed by former students Camilla, Sandra, Sune	   
#  19 : An "alternative" scatter search as proposed by former students Camilla, Sandra, Sune	   
#  20 : It is tried to find an optimal solution using CPLEX. The objective value from the start
#        solution is thereby passed to CPLEX as an upper cutoff value.
# 20XY: First calls the heuristic with identifier XY = 1, ..., 19 and then tries CPLEX using
#       the heuristic solution value as upper cutoff
#  50 : IRNLS(0);
#  51 : IRNLS_v2(0);
#  52 : PIRNLS(population_sizes=[100], max_runs=[800])
#  53 : PIRNLS(population_sizes=[500, 50, 10], max_runs=[200, 800, 2000])
#  54 : PIRNLS_v2(population_sizes=[50, 20], max_runs=[2000, 2000])
#  55 : PIRNLS_v2(population_sizes=[500, 50, 10], max_runs=[200, 800, 2000])

#--------------------------
# Parameter: GreedyMeasure
#--------------------------
# Specifies if a greedy or the LP heuristic is used for constructing an initial feasible solution.               
# If Greedy is used, it also tells what greedy measure should be applied. Possible values are:
# 
#   0 : LP heuristic and not greedy is applied
#   1 : Greedy measure is costs per unit with fixed cost linearised by arc capacity
#   2 : Greedy measure is costs per unit with fixed cost linearised by remaining arc capacity
#   3 : Greedy measure is total cost of supplying the remaining quantity on an arc
#   4 : Greedy measure is total cost of supplying the given capacity on an arc

#-----------------------
# Parameter: LocalSearch
#-----------------------
# LocalSearch specifies which type of a local search should be used in all methods relying 
# on local search. It can take the following values.
# 
#   0 : means a First Accept local search
#   1 : means a Best Accept local search

#-------------------
# Parameter: MaxIter
#-------------------
# MaxIter specifies how many iterations a method may perform. Currently this parameter is only used by
# the guided local search method and the record-to-record travel. For the last method, it specifies the
# maximum number of possible uphill moves done before a standard local search is re-applied.

#---------------------------------
# Parameter: MaxIterWithoutImprove
#---------------------------------
# MaxIterWithoutImprove specifies how many subsequent iterations without having found a new best solution
# could be done. The parameter is used by most of the methods for defining the stop criterion.

#-------------------------------
# Parameter: GLS_alpha_fixedcost
#-------------------------------
# GLS_alpha_fixedcost controls the penalities added to the fixed cost within GLS. Default value is 0.1

#--------------------------------
# Parameter: GLS_alpha_transpcost
#--------------------------------
# GLS_alpha_transpcost controls penalities added to the transportation cost within GLS. Default value is 0

#--------------------
# Parameter: SA_beta
#---------------------------------
# SA_beta specifies the parameter of the geometric cooling schedule T' = SA_beta * T of the simulated
# annealing procedure. Default value is 0.95.

#---------------------------------
# Parameter: min_acc_rate
#---------------------------------
# The classical SA procedure stops if the acceptance rate falls below this min_acc_rate*100% and
# if no improved solution was found in the recent MaxIterWithoutImprove iterations

#---------------------------------
# Parameter: ini_acc_rate
#---------------------------------
# The classical SA procedure determines the initial temperature such that at this temperature
# about min_acc_rate*100% solutions are accepted. 

#---------------------------------
# Parameter: sample_growth
#---------------------------------
# The classical SA procedure sets the sample size at the start temperature equal to the number
# of non-basic arcs. Each time the temperature is reduced, the sample size is increased 
# by sample_growth*100% (and at least by 1).

#-----------------
# Parameter: Runs
#-----------------
# Runs specifies how many times a procedure should be called. This is useful in case of stochastic search
# procedures. The procedure is the repeated "Run" times and the average, best and worse objective
# recorded.

#--------------------
# Parameter: Restart
#--------------------
# If a (stochastic) method is executed for Runs > 1 times, then the  next run should ideally be independent
# from the previous. This is achieved be setting "Restart=1". If, however, Restart=0, then the next run
# always takes the best solution computed in the previous run as initial solution.

#------------------
# Parameter: Output
#------------------
# If Output equals 0, no output is displayed. If equal to 1, solution values and computation times
# are displayed. If equal to 2 also the transportation quantities in a solution are displayed.

#-------------------------------
# Parameter: Intermediate_Output
#-------------------------------
# If Intermediate_Output equals 0, no intermediate results for each iteration are displayed.
# If equal to 1, this is done.

#------------------
# Parameter: lambda
#------------------
# lambda is the population size used in the EA.

#--------------
# Parameter: mu
#--------------
# mu is the number of off-springs generated in the EA.

#-----------------------
# Parameter: RTR_procent
#-----------------------
# Within the Record-to-record travel heuristic, a non-improving solution 
# is defined as "acceptable" if its objective value is not larger than
# the (1.0+RTR_procent) times the best objective value

#-----------------------
# Parameter: RTR_ILS_REP
#-----------------------
# RTR_ILS_REP is the number of times a single ILS iteration (Random kick to a solution and subsequent
# local search) is carried out within the RTR-ILS method. Use RTR_ILS_REP = 1 for the simple
# method and RTR_ILS_REP = 10 for the "enhanced" method.

#-----------------------
# Parameter: CPXTIM
#-----------------------
# Limits the computation time (CPU time) used by CPLEX to the given number of seconds

#-----------------------
# Parameter: CPXNODELIM
#-----------------------
# Limits on the number of nodes that CPLEX may enumerate

#-----------------------
# Parameter: CALLBCK
#-----------------------
# Controls if a heuristic callback is used if the CPLEX's optimizer is applied to solve the problem.
# CALLCK=0 means that no callback is used. Otherwise, CALLBCK may take the same values as the
# the parameter ImproveMethod. In this case the corresponding improvement method is used
# within the heuristic callback method. Possible procedures to be applied are the local search,
# ILS, RTR, RTR-ILS, RTR-VNS, ILS-RTR, VNS and VNS-RTR. See class FCTPopt.java.


